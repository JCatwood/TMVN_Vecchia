% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nleqsv.R
\name{line_search}
\alias{line_search}
\title{Line search along Newton step}
\usage{
line_search(
  x,
  grad,
  objFn,
  NewtonStep,
  alpha = 1e-04,
  maxStep = Inf,
  stepTol = 1e-04
)
}
\arguments{
\item{x}{current point}

\item{grad}{gradient of `objFn` at `x`}

\item{objFn}{objective function}

\item{NewtonStep}{the Newton step, $- H^{-1}g$. Practically, any direction
with a negative inner product with grad will work}

\item{alpha}{sufficient decrease coefficient}

\item{maxStep}{maximum step length}

\item{stepTol}{absolute convergence parameter}
}
\value{
a list of `code` and `x_new`
code 1: qualifying `x_new` found
code 2: qualifying `x_new` not found, return the original input `x`
code 3: `NewtonStep` is not a descending direction
}
\description{
Line search along Newton step
}
\examples{
Fn <- function(x){c(x[1]^2 + x[2]^2 - 2, exp(x[1] - 1) + x[2]^3 - 2)}
J <- function(x){matrix(c(2*x[1], 2*x[2],
                          exp(x[1] - 1), 3*x[2]^2), 2, 2, byrow=T)}
obj_fn <- function(x){0.5 * sum(Fn(x)^2)}
x <- c(2, 0.5)
for(i in 1 : 10){
  Newton_step <- - as.vector(solve(J(x)) \%*\% Fn(x))
  grad <- as.vector(t(J(x)) \%*\% Fn(x))
  ret <- line_search(x, grad, obj_fn, Newton_step)
  if(ret$code == 0)
    x <- ret$x_new
  else
    break
}
cat("Solution is", x, "where f(x) is", obj_fn(x), "\n")
}
